
specific requirements of the subject about this part:
	- need to have GET, POST, DELETE
	- a request to a server cannot hang forever
	- headers can be compared with NGINX, which we can consider HTTP1.1 compliant
	- HTTP reponse status codes must be accurate


source: https://developer.mozilla.org/en-US/docs/Web/HTTP/


HTTP = a protocol for fetching resources, such as a HTML Document.
a complete document can be reconstructed form different sub-documents.
	so a different document for layout, for text, for adds, etc.
these documents can be requested of of different servers.
	a server for the add, a server for the general webpages, etc.

the client(web server) sends a 'request', the server sends a 'response' as answer

to show one webpage, a client might send multiple request, one first request for the general document,
and multiple different requests to parse/show the page correctly. (CGI, css, images etc)
these different requests are combined to show the final version of the requested webpage.


steps taken by a client to communicate with a server:
	- open a TCP connection. (used to send and receive messages).
	- send an HTTP message.
	- read response of the server.
	- close or reuse the connection.

HTTP request and response structure:
	- start-line 
		request: *Method* *Path* *Version of protocol*
		response: *Version of protocol* *status code* *status message*
	- Optional set of HTTP headers
	- blank line, to indicate the meta-info has been send
	- optional body

A request has the following attributes:
	- Method:
		* GET, POST, DELETE
		* what do we need to do with the other possible methods (like HEAD and OPTIONS)
	- Path:
		* the path of the resource to fetch.
		* the path is the URL, without the protocol(http://), the domain(mysite.com) or the port(8080)
		* format of the request target varies between different http methods
			* absolute path, ultimately followed by a '?' and query string
			* the complete URL
			* the authority component of a URL (domain name and optionally the port) - only used with CONNECT
			* the asterisk form, used with OPTIONS
	- Version of the protocol:
		* Versoin of the HTTP protocol
		* should this, in our case, always be HTTP/1.1?
	- Headers:
		* optional
		* are for additional information for the servers
		* what are the options, what do we want/need to handle
		* is a case-insensitive string followed by a ':' and a value
		* A header will be one line, but there can be multiple headers.
	- Body:
		* optional
		* For PUT and POST a body is typically required, the body will have the data used to fulfill the request
	
A respons has the following attributes:
	- Version of the protocol
		* Versoin of the HTTP protocol
		* should this, in our case, always be HTTP/1.1
	- Status codes
		* a code to indicate if the request was successfull or not
		* need the correct codes, for every situation
	- Status message
		* purely informational short description of the status code
		* see 'list_http_status_codes.txt'
	- Headers
		* optional
		* give additional information about the server
		* what are the options, what do we want/need to handle
		* is a case-insensitive string followed by a ':' and a value
		* A header will be one line, but there can be multiple headers.
	- Body
		* optionally
		* contains the fetched resource
		* three types
			* bodies consisting of a single file of known length, defined by two headers (content_type adn content-length)
			* bodies consisting of a single file of unknown length
			* multiple resource bodies, consisting of multipart body.
